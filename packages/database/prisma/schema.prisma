datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionSource {
  BUYBACK
  SALE
  PACK_PURCHASE
  REDEMPTION
  ADJUSTMENT
}

enum ItemStatus {
  STORED
  LISTED
  SOLD
  REDEEMED
  IN_TRANSFER
}

enum ListingStatus {
  ACTIVE
  SOLD
  REMOVED
}

enum PackStatus {
  UNOPENED
  OPENED
  REDEEMED
}

enum IngestionStatus {
  PENDING
  REVIEW
  APPROVED
  REJECTED
}

enum CardAssetStatus {
  UPLOADING
  UPLOADED
  OCR_PENDING
  OCR_COMPLETE
  CLASSIFY_PENDING
  CLASSIFIED
  VALUATION_PENDING
  READY
  ASSIGNED
  ERROR
}

enum ProcessingJobType {
  OCR
  CLASSIFY
  VALUATION
}

enum ProcessingJobStatus {
  QUEUED
  IN_PROGRESS
  COMPLETE
  FAILED
}

enum CollectibleCategory {
  SPORTS
  POKEMON
  COMICS
}

enum PackTier {
  TIER_25
  TIER_50
  TIER_100
  TIER_500
}

enum ShippingStatus {
  PENDING
  IN_PROGRESS
  SHIPPED
  CANCELLED
}

enum KioskSessionStatus {
  COUNTDOWN
  LIVE
  REVEAL
  COMPLETE
  CANCELLED
}

model User {
  id              String          @id @default(uuid())
  email           String?         @unique
  phone           String?         @unique
  phoneVerifiedAt DateTime?
  displayName     String?
  avatarUrl       String?
  createdAt       DateTime        @default(now())
  wallet          Wallet?
  items           Item[]
  ownerships      ItemOwnership[]
  listings        Listing[]       @relation("SellerListings")
  shippingRequests ShippingRequest[]
  packs           PackInstance[]
  ingestions      IngestionTask[]
  cardBatches     CardBatch[]
  cardNotes       CardNote[]
  reviewedCards   CardAsset[]     @relation("CardAssetHumanReviewer")
  sessions        Session[]
}

model Location {
  id          String   @id @default(uuid())
  slug        String   @unique
  name        String
  description String?
  address     String
  mapsUrl     String?
  mediaUrl    String?
  recentRips  Json     @db.JsonB
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  liveRips    LiveRip[]
  kioskSessions KioskSession[]
}

model LiveRip {
  id           String    @id @default(uuid())
  slug         String    @unique
  title        String
  description  String?
  videoUrl     String
  thumbnailUrl String?
  locationId   String?
  featured     Boolean   @default(false)
  viewCount    Int?
  muxAssetId   String?
  muxPlaybackId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  location     Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  kioskSessionId String?  @unique
  kioskSession   KioskSession? @relation("KioskSessionLiveRip", fields: [kioskSessionId], references: [id], onDelete: SetNull)
}

model Wallet {
  id           String              @id @default(uuid())
  userId       String              @unique
  balance      Int                 @default(0)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String            @id @default(uuid())
  walletId    String
  amount      Int
  type        TransactionType
  source      TransactionSource
  note        String?
  referenceId String?
  createdAt   DateTime          @default(now())
  wallet      Wallet            @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Item {
  id             String          @id @default(uuid())
  name           String
  set            String
  number         String?
  language       String?
  foil           Boolean         @default(false)
  estimatedValue Int?
  status         ItemStatus      @default(STORED)
  vaultLocation  String?
  imageUrl       String?
  thumbnailUrl   String?
  detailsJson    Json?
  ownerId        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  owner          User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  listings       Listing?
  ownerships     ItemOwnership[]
  packSlots      PackSlot[]
  ingestionTask  IngestionTask?
  shippingRequest ShippingRequest?
  kioskReveals   KioskSession[]  @relation("KioskReveal")
}

model AuthVerification {
  id        String   @id @default(uuid())
  phone     String   @unique
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  tokenHash String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ItemOwnership {
  id         String   @id @default(uuid())
  itemId     String
  ownerId    String
  note       String?
  acquiredAt DateTime @default(now())
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Listing {
  id        String        @id @default(uuid())
  itemId    String        @unique
  sellerId  String
  price     Int
  status    ListingStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  item      Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  seller    User          @relation("SellerListings", fields: [sellerId], references: [id], onDelete: Cascade)
}

model ShippingRequest {
  id                String          @id @default(uuid())
  itemId            String          @unique
  userId            String
  status            ShippingStatus  @default(PENDING)
  recipientName     String
  addressLine1      String
  addressLine2      String?
  city              String
  state             String?
  postalCode        String
  country           String
  phone             String?
  email             String?
  processingFeeMinor Int
  shippingFeeMinor  Int
  totalFeeMinor     Int
  notes             String?
  trackingNumber    String?
  carrier           String?
  fulfilledAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PackDefinition {
  id             String              @id @default(uuid())
  name           String
  description    String?
  price          Int
  inventoryCount Int                 @default(0)
  category       CollectibleCategory @default(SPORTS)
  tier           PackTier            @default(TIER_50)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  packs          PackInstance[]
  cardAssets     CardAsset[]
}

model PackInstance {
  id               String         @id @default(uuid())
  packDefinitionId String
  ownerId          String?
  status           PackStatus     @default(UNOPENED)
  createdAt        DateTime       @default(now())
  openedAt         DateTime?
  packDefinition   PackDefinition @relation(fields: [packDefinitionId], references: [id], onDelete: Cascade)
  owner            User?          @relation(fields: [ownerId], references: [id])
  slots            PackSlot[]
  kioskSessions    KioskSession[]
}

model KioskSession {
  id                 String             @id @default(uuid())
  code               String             @unique
  controlTokenHash   String
  packInstanceId     String?
  locationId         String?
  status             KioskSessionStatus @default(COUNTDOWN)
  countdownSeconds   Int                @default(10)
  liveSeconds        Int                @default(30)
  countdownStartedAt DateTime           @default(now())
  liveStartedAt      DateTime?
  revealItemId       String?
  videoUrl           String?
  thumbnailUrl       String?
  qrLinkUrl          String?
  buybackLinkUrl     String?
  revealPayload      Json?
  muxStreamId        String?
  muxStreamKey       String?
  muxPlaybackId      String?
  muxAssetId         String?
  muxBroadcastId     String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  completedAt        DateTime?

  packInstance PackInstance? @relation(fields: [packInstanceId], references: [id], onDelete: SetNull)
  location     Location?     @relation(fields: [locationId], references: [id], onDelete: SetNull)
  revealItem   Item?         @relation("KioskReveal", fields: [revealItemId], references: [id], onDelete: SetNull)
  liveRip      LiveRip?        @relation("KioskSessionLiveRip")
}

model PackSlot {
  id             String       @id @default(uuid())
  packInstanceId String
  itemId         String
  packInstance   PackInstance @relation(fields: [packInstanceId], references: [id], onDelete: Cascade)
  item           Item         @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model IngestionTask {
  id         String          @id @default(uuid())
  externalId String?
  status     IngestionStatus @default(PENDING)
  itemId     String?         @unique
  ownerId    String
  rawPayload Json?
  notes      String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  item       Item?           @relation(fields: [itemId], references: [id])
  owner      User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model CardBatch {
  id             String   @id @default(uuid())
  label          String?
  notes          String?
  uploadedById   String
  totalCount     Int      @default(0)
  processedCount Int      @default(0)
  status         String   @default("UPLOADING")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  uploadedBy User        @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  cards      CardAsset[]
}

model CardAsset {
  id                      String          @id @default(uuid())
  batchId                 String
  storageKey              String
  fileName                String
  fileSize                Int
  mimeType                String
  imageUrl                String
  thumbnailUrl            String?
  status                  CardAssetStatus @default(UPLOADING)
  ocrText                 String?
  ocrJson                 Json?
  classificationJson      Json?
  classificationSourcesJson Json?
  valuationMinor          Int?
  valuationCurrency       String?         @default("USD")
  valuationSource         String?
  marketplaceUrl          String?
  assignedDefinitionId    String?
  assignedAt              DateTime?
  errorMessage            String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  processingStartedAt     DateTime?
  processingCompletedAt   DateTime?
  customTitle             String?
  customDetails           String?
  ebaySoldUrl             String?
  ebaySoldUrlVariant      String?
  ebaySoldUrlHighGrade    String?
  ebaySoldUrlPlayerComp   String?
  ebaySoldUrlAiGrade      String?
  humanReviewedAt         DateTime?
  humanReviewedById       String?
  sportsDbPlayerId        String?
  sportsDbMatchConfidence Float?
  resolvedPlayerName      String?
  resolvedTeamName        String?
  playerStatsSnapshot     Json?
  aiGradingJson           Json?
  aiGradeFinal            Float?
  aiGradeLabel            String?
  aiGradePsaEquivalent    Int?
  aiGradeRangeLow         Int?
  aiGradeRangeHigh        Int?
  aiGradeGeneratedAt      DateTime?

  batch              CardBatch       @relation(fields: [batchId], references: [id], onDelete: Cascade)
  assignedDefinition PackDefinition? @relation(fields: [assignedDefinitionId], references: [id], onDelete: SetNull)
  notes              CardNote[]
  jobs               ProcessingJob[]
  humanReviewer      User?           @relation("CardAssetHumanReviewer", fields: [humanReviewedById], references: [id])
  sportsDbPlayer     SportsDbPlayer? @relation(fields: [sportsDbPlayerId], references: [id], onDelete: SetNull)

  @@index([sportsDbPlayerId])
}

model CardNote {
  id        String   @id @default(uuid())
  cardId    String
  authorId  String
  body      String
  createdAt DateTime @default(now())

  card   CardAsset @relation(fields: [cardId], references: [id], onDelete: Cascade)
  author User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model ProcessingJob {
  id           String              @id @default(uuid())
  cardAssetId  String
  type         ProcessingJobType
  status       ProcessingJobStatus @default(QUEUED)
  payload      Json?
  attempts     Int                 @default(0)
  errorMessage String?
  lockedAt     DateTime?
  completedAt  DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  cardAsset CardAsset @relation(fields: [cardAssetId], references: [id], onDelete: Cascade)
}

model SportsDbTeam {
  id             String    @id
  name           String
  alternateNames String[]  @default([])
  sport          String
  league         String?
  city           String?
  abbreviation   String?
  logoUrl        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastSyncedAt   DateTime?

  players SportsDbPlayer[]

  @@index([sport, league])
  @@index([name])
}

model SportsDbPlayer {
  id             String    @id
  fullName       String
  displayName    String?
  alternateNames String[]  @default([])
  sport          String
  league         String?
  nationality    String?
  position       String?
  birthDate      DateTime?
  active         Boolean   @default(true)
  teamId         String?
  headshotUrl    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastSyncedAt   DateTime?

  team       SportsDbTeam?          @relation(fields: [teamId], references: [id], onDelete: SetNull)
  seasons    SportsDbPlayerSeason[]
  cardAssets CardAsset[]

  @@index([sport, league])
  @@index([fullName])
  @@index([teamId])
}

model SportsDbPlayerSeason {
  id           String    @id @default(uuid())
  playerId     String
  season       String
  league       String?
  statsJson    Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastSyncedAt DateTime?

  player SportsDbPlayer @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, season, league])
  @@index([season])
}
